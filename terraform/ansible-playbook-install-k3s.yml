# This playbook will install k3s as master on the node with the ID "k3s-vm-0" every other vm/node created by terraform will be registed as worker in k3s.
- name: run install k3s playbook
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Download k3s install script
    get_url:
      url: https://get.k3s.io
      dest: /tmp/k3s.sh
      mode: a+x
  - name: run k3s install script on master
    shell: K3S_KUBECONFIG_MODE="644" /tmp/k3s.sh --disable traefik --disable servicelb
    remote_user: ubuntu
    when: ansible_facts['nodename'] == "k3s-vm-0"
  - name: copy node token from master to ansible machine
    ansible.builtin.fetch:
      src: /var/lib/rancher/k3s/server/node-token
      dest: /tmp/node-token
      flat: yes
    when: ansible_facts['nodename'] == "k3s-vm-0"
  - name: sleep for 180 seconds and wait for the node-token to be copied
    wait_for:
      timeout: 180
    delegate_to: localhost
    when: ansible_facts['nodename'] != "k3s-vm-0"
  - name: Get K3S_TOKEN 
    delegate_to: 127.0.0.1
    shell: cat /tmp/node-token
    register: version
    when: ansible_facts['nodename'] != "k3s-vm-0"
  - name: run k3s install script on node
    shell: "K3S_KUBECONFIG_MODE=644 K3S_URL=https://k3s-vm-0:6443 K3S_TOKEN={{ version.stdout }} /tmp/k3s.sh"
    remote_user: ubuntu
    args:
      executable: /bin/bash
    when: ansible_facts['nodename'] != "k3s-vm-0"
  - name: Copy file 01-netcfg.yml with root and 755 # copy netplan file with dhcp enabled
    ansible.builtin.copy:
      src: "./netplan/01-netcfg.yaml"
      dest: /etc/netplan/01-netcfg.yaml
      owner: root
      group: root
      mode: '755'
  - name: Copy file 99-disable-network-config.cfg with root and 755 # disable cloud-init network config
    ansible.builtin.copy:
      src: "./netplan/99-disable-network-config.cfg"
      dest: /etc/netplan/99-disable-network-config.cfg
      owner: root
      group: root
      mode: '755'
  - name: Run netplan apply
    command: netplan apply
  - name: Install nfs-common
    apt:
      name: nfs-common
  - name: Create directory /mnt/media-k3s
    file:
      path: /mnt/media-k3s
      state: directory
  - name: Mount media-k3s share (and write to fstab for persistants)
    mount:
      path: /mnt/media-k3s
      src: omv01.local:/export/media-k3s/
      fstype: nfs4
      opts: defaults,user,exec,nofail
      state: mounted
  - name: Get kube config
    fetch:
      src: '/etc/rancher/k3s/k3s.yaml'
      dest: '/home/ubuntu/.kube/config'
      flat: yes
    when: ansible_facts['nodename'] == "k3s-vm-0"
  - name: Kube Config Loadbalancer eintragen
    delegate_to: 127.0.0.1
    remote_user: ubuntu
    replace:
      path: '/home/ubuntu/.kube/config'
      regexp: 'server: https://127.0.0.1:6443'
      replace: 'server: https://k3s-vm-0.local:6443' # Replace this with your master
    when: ansible_facts['nodename'] == "k3s-vm-0"
  - name: reboot the machine with all defaults
    reboot:
  - name: Change ssh host to dns name
    set_fact:
      ansible_ssh_host: "{{ ansible_facts['nodename'] }}"
  - name: remove old primary ip address # Doesnt work sadly, the ip comes back after a reboot...
    shell: "ip address del {{ ansible_eth0.ipv4.address }}/24 dev eth0"
    become: yes
  - name: final reboot
    reboot: